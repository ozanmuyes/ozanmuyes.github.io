---
import { type CollectionEntry } from "astro:content";
import ArrowRight from "../icons/ArrowRight.astro";
import FormattedDate from "./FormattedDate.astro";

type Props = {
  post: CollectionEntry<"blog" | "series">;
  class?: string;
  headingLevel?: "h2" | "h3";
  showReadPostWithArrow?: boolean;
};

const {
  post,
  class: className,
  headingLevel = "h2",
  showReadPostWithArrow = true,
} = Astro.props;
const { title, excerpt, tags } = post.data;
let { publishedAt = undefined, updatedAt = undefined } = post.data;
const TitleTag = headingLevel;

if (publishedAt && typeof publishedAt === "string") {
  publishedAt = new Date(publishedAt);
}
if (updatedAt && typeof updatedAt === "string") {
  updatedAt = new Date(updatedAt);
}
---

<a
  class:list={["group flex items-start justify-between gap-8", className]}
  href={`/${post.collection}/${post.slug}/`}
>
  <div class="grow">
    <TitleTag
      class="font-serif text-xl font-medium leading-tight group-hover:underline group-hover:decoration-dashed group-hover:decoration-1 group-hover:underline-offset-4 sm:text-2xl"
    >
      {title}
    </TitleTag>

    <div class="mt-1 text-sm leading-normal">
      <FormattedDate date={publishedAt} />
      {
        updatedAt && (
          <>
            {" "}
            <span>
              (Updated on <FormattedDate date={updatedAt} />)
            </span>
          </>
        )
      }
    </div>

    {
      tags && (
        <div class="mt-1 text-sm leading-normal">
          <span>Tags: {tags.join(", ")}</span>
        </div>
      )
    }

    {excerpt && <div class="mt-3 text-sm leading-normal">{excerpt}</div>}
  </div>

  {
    showReadPostWithArrow && (
      <div class="hidden font-serif italic opacity-0 transition group-hover:opacity-100 sm:inline-flex sm:shrink-0 sm:items-center sm:gap-1">
        Read Post <ArrowRight class="h-4 w-4 fill-current" />
      </div>
    )
  }
</a>
