---
import {
  type CollectionEntry,
  type ContentEntryMap,
  getCollection,
} from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import FormattedDate from "../../../components/FormattedDate.astro";
import Button from "../../../components/Button.astro";

// FIXME extract this to somewhere else
type _ResItem<C extends keyof ContentEntryMap> = CollectionEntry<C> & {
  _nestedPath: string;
};
type _Res<C extends keyof ContentEntryMap> = Record<string, Array<_ResItem<C>>>;
export function _TODO_foo<C extends keyof ContentEntryMap>(
  collection: Array<CollectionEntry<C>>,
): _Res<C> {
  const res: _Res<C> = {};

  collection.forEach((item) => {
    const [slug, rest] = item.slug.replace(/\/+$/, "").split(/\/(.*)/s);

    if (!Object.prototype.hasOwnProperty.call(res, slug)) {
      res[slug] = [];
    }

    res[slug].push({
      _nestedPath: rest,
      ...item,
    });
  });

  return res;
}

export async function getStaticPaths() {
  const seriesPosts = await getCollection("series");

  return Object.entries(_TODO_foo(seriesPosts)).flatMap(
    ([subCollName /* e.g. "llm", "rust" */, subCollPosts]) =>
      subCollPosts.flatMap((subCollPost) => ({
        params: {
          slug: subCollName,
          page: subCollPost._nestedPath,
        },
        props: { post: subCollPost },
      })),
  );
}

type Props = {
  post: CollectionEntry<"series">;
  // prevPost: CollectionEntry<"series">;
  // nextPost: CollectionEntry<"series">;
};

const { href } = Astro.url;
const { post /* , prevPost, nextPost */ } = Astro.props;
const { title, publishedAt, updatedAt, excerpt, tags = [], seo } = post.data;

const { Content } = await post.render();
---

<BaseLayout>
  <article class="mb-16 sm:mb-24">
    <!-- FIXME better wording for the link -->
    <a href={`/series/${Astro.params.slug}`} class="pb-16"
      >&lt;&dash; View All Posts for the Series</a
    >

    <header class="mb-8">
      <h1
        class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight"
      >
        {title}
      </h1>
      <div class="mt-4 text-sm">
        <FormattedDate date={publishedAt} />
        {
          updatedAt && (
            <>
              {" "}
              <span>
                (Updated on <FormattedDate date={updatedAt} />)
              </span>
            </>
          )
        }
      </div>
    </header>

    <div class="max-w-none prose prose-dante sm:prose-lg">
      <Content />
    </div>

    <!-- TODO cont. with src/pages/blog/[slug].astro:71 (`mt-8 flex flex-wrap items-center`...) -->
  </article>

  <!-- FIXME prev / next -->
</BaseLayout>
