---
import { getCollection, getEntry, type CollectionEntry } from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import Button from "../../../components/Button.astro";
import FormattedDate from "../../../components/FormattedDate.astro";
import PostPreview from "../../../components/PostPreview.astro";

export async function getStaticPaths() {
  const seriesPosts = await getCollection("series");

  const promises = seriesPosts.map((post) => {
    if (post.data.nextPost) {
      return new Promise((resolve, reject) => {
        getEntry(post.data.nextPost!)
          .then((nextPostWData) => {
            post.data.nextPost = nextPostWData;
            resolve(post);
          })
          .catch(reject);
      });
    }

    return post;
  });
  const _res = (await Promise.all(promises)) as Array<
    CollectionEntry<"series">
  >;

  return _res.map((post, i) => {
    const [slug, page] = post.slug.replace(/\/+$/, "").split(/\/(.*)/s);

    // FIXME See http://localhost:4321/series/llm/what-is-llm
    //       prev and next is the SAME!!1
    if (i > 0 && _res[i - 1].slug.startsWith(slug)) {
      post.data.previousPost = _res[i - 1];
    }

    return {
      params: { slug, page },
      props: { post },
    };
  });
}

const { href } = Astro.url;
const { post } = Astro.props;
const { title, publishedAt, updatedAt, excerpt, seo, nextPost, previousPost } =
  post.data;

const { Content } = await post.render();
---

<BaseLayout
  title={`${title} | ${Astro.params.slug}`}
  description={excerpt}
  image={seo?.image}
  pageType="article"
  showHeader={false}
>
  <article class="mb-16 sm:mb-24">
    <!-- FIXME better wording for the link -->
    <a href={`/series/${Astro.params.slug}`} class="pb-16"
      >&lt;&dash; View All Posts for the Series</a
    >

    <header class="mb-8">
      <h1
        class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight"
      >
        {title}
      </h1>
      <div class="mt-4 text-sm">
        <FormattedDate date={publishedAt} />
        {
          updatedAt && (
            <>
              {" "}
              <span>
                (Updated on <FormattedDate date={updatedAt} />)
              </span>
            </>
          )
        }
      </div>
    </header>

    <div class="max-w-none prose prose-dante sm:prose-lg">
      <Content />
    </div>

    <div
      class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base"
    >
      <!-- NOTE No tags for series posts -->

      <Button
        class="copy-url-button"
        aria-label="Copy link"
        data-url={href}
        data-tooltip-default="Copy link"
        data-tooltip-success="Copied">Share</Button
      >
    </div>
  </article>

  {
    (previousPost || nextPost) && (
      <div class="my-16 sm:my-24">
        {previousPost && (
          <div>
            <h2 class="mb-3 text-xl font-serif italic sm:mb-4 sm:text-2xl">
              Read Previous Post
            </h2>

            <PostPreview
              post={previousPost}
              class="mb-10 sm:mb-12"
              headingLevel="h3"
              showReadPostWithArrow={false}
            />
          </div>
        )}

        {nextPost && (
          <div style="text-align: right;">
            <h2 class="mb-3 text-xl font-serif italic sm:mb-4 sm:text-2xl">
              Read Next Post
            </h2>

            <PostPreview
              post={nextPost}
              class="mb-10 sm:mb-12"
              headingLevel="h3"
              showReadPostWithArrow={false}
            />
          </div>
        )}
      </div>
    )
  }
</BaseLayout>

<script>
  document.addEventListener("astro:page-load", () => {
    const copyUrlButton = document.querySelector(
      ".copy-url-button",
    ) as HTMLButtonElement;
    copyUrlButton?.addEventListener("click", async () => {
      await copyUrl(copyUrlButton);
    });

    async function copyUrl(button: HTMLButtonElement) {
      let url = button.getAttribute("data-url") || "";
      let label = button.innerText;

      await navigator.clipboard.writeText(url);

      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = label;
      }, 2500);
    }
  });
</script>
